#! /usr/bin/perl
use strict;
use File::Basename;
use Cwd 'realpath';
use JSON;

my $pre_minim = 70;

my $minim;
my $ourdir;
my $avail;
my $ourlcn;
my $ourlcsh;
my $ourscrat;
my $thisnow;
my $memry;
my $memfile;

$thisnow = `date +%s`; chomp($thisnow);


sub numerisort {
  my $lc_source;
  my @lc_ray;
  my @lc_dray;
  
  $lc_source = $_[0];
  @lc_ray = @$lc_source;
  @lc_dray = sort {$a <=> $b} @lc_ray;
  @$lc_source = @lc_dray;
}

sub safeo {
  my $lc_ok;
  my $lc_cont;
  my $lc_ret;
  $lc_ok = 0;
  $ENV{"LANGDRILL_X_X_FILE"} = $_[0];
  $lc_cont = `cat \"\${LANGDRILL_X_X_FILE}\"`;
  eval {
    $lc_ret = decode_json($lc_cont);
    $lc_ok = 10;
  };
  if ( $lc_ok < 5 ) { $lc_ret = {}; }
  return $lc_ret;
}

sub saveo {
  my $lc_dat;
  
  $ENV{"LANGDRILL_X_X_FILE"} = $_[0];
  $lc_dat = encode_json($_[1]);
  open TAK, "| cat > \"\${LANGDRILL_X_X_FILE}\"";
  print TAK $lc_dat . "\n";
  close TAK;
}

$ourdir = dirname(dirname(realpath($0)));
$memfile = $ourdir . '/memory';
system("mkdir",$memfile);
$memfile .= '/mem.json';
$memry = safeo($memfile);
if ( ref($memry->{'hist'}) ne 'ARRAY' ) { $memry->{'hist'} = []; }
$pre_minim = 5;

# Register last triumph
{
  my $lc_a;
  my $lc_b;
  my $lc_c;
  
  $lc_a = $memry->{'hist'};
  $lc_b = $memry->{'last'};
  $lc_c = int(($lc_b - &check_avail()) + 0.2);
  @$lc_a = (@$lc_a,$lc_c);
}

# Make sure standard minimum is not less than a third of past-conquests
# (of which no more than twelve should be recorded)
{
  my $lc_a;
  my $lc_b;
  my $lc_c;
  my @lc_d;
  my $lc_max;
  my $lc_seto;
  my $lc_targo;
  my $lc_divisor;
  
  $lc_max = 20;
  $lc_targo = 4;
  
  $lc_seto = int(($lc_max / 2) + 0.4);
  if ( ( ($lc_max - $lc_seto) % 2 ) > 0.5 ) { $lc_seto = int($lc_seto + 1.2); }
  
  $lc_a = $memry->{'hist'};
  
  # We don't just hope that there are more than twelve recorded.
  # We make sure of it.
  @lc_d = @$lc_a;
  $lc_c = @lc_d;
  
  # We make sure there are no more than the maximum recorded
  # and no more than that stored in long-term memory.
  while ( $lc_c > ( $lc_max + 0.5 ) ) { shift(@lc_d); @$lc_a = @lc_d; $lc_c = @lc_d; }
  
  # And as for the current calculation - we not only allow
  # no-more - but we also allow no-less.
  while ( ( $lc_c > 0.5 ) && ( $lc_c < ( $lc_max + 0.5 ) ) )
  {
    @lc_d = (@lc_d,@lc_d);
    $lc_c = @lc_d;
  }
  while ( $lc_c > ( $lc_max + 0.5 ) ) { shift(@lc_d); $lc_c = @lc_d; }
  
  # We must now numerically sort the remaining array - so
  # that the popping and shifting to come really will result
  # in an interquartile range.
  &numerisort(\@lc_d);
  
  while ( $lc_c > ( $lc_seto + 0.5 ) )
  {
    shift(@lc_d);
    pop(@lc_d);
    $lc_c = @lc_d;
  }
  
  $lc_divisor = $lc_c; if ( $lc_c < 1 ) { $lc_divisor = 1; }
  $lc_c = 0;
  foreach $lc_b (@lc_d)
  {
    $lc_c = int($lc_c + $lc_b + 0.2);
  }
  $lc_c = int((($lc_c * $lc_targo) / $lc_divisor) + 0.49);
  if ( $pre_minim < $lc_c ) { $pre_minim = $lc_c; }
}


# Reveal the standard minimum:
system("echo",("Minimum deck size calculated to: " . $pre_minim));
sleep(4);


($ourlcn,$minim) = @ARGV;
if ( $minim eq '' ) { $minim = $pre_minim; }
if ( $ourlcn eq '' )
{
  die "\nNo lesson specified - that is a deal-breaker.\n\n";
}


$ourlcsh = $ourdir . '/comres/sh/lcn-' . $ourlcn . '.sh';
if ( !(-f $ourlcsh) )
{
  die ("\nNo such lesson: " . $ourlcn . ":\n" .
    "  (Unrepresented at " . $ourlcsh . ")\n" .
  "\n");
}
$ourscrat = $ourdir . '/scratch/at-' . $thisnow;
{
  my $lc_a;
  my @lc_b;
  my $lc_c;
  my $lc_d;
  my $lc_e;
  $ENV{"LANGDRILL_X_MAIN"} = $ourdir;
  $ENV{"LANGDRILL_X_SUSCRAT"} = ($ourdir . '/scratch');
  $ENV{"LANGDRILL_X_SHRS"} = ($ourdir . '/comres/sh');
  $lc_a = `cat \"\${LANGDRILL_X_SUSCRAT}\"`;
  @lc_b = split(/\n/,$lc_a);
  foreach $lc_c (@lc_b)
  {
    ($lc_d,$lc_e) = split(quotemeta('-'),$lc_c);
    if ( $lc_d eq 'at' )
    {
      if ( ( $thisnow - $lc_e ) > ( 60 * 10 ) )
      {
        system("echo","rm","-rf",($ourdir . '/scratch/' . $lc_c));
      }
    }
  }
}

system("languamunity","clear-names");
system("languamunity","lc-take",($ourdir . "/res/names.json"));

sub check_avail {
  my $lc_avail;
  $lc_avail = `languamunity statlli deck+hand`;
  chomp($lc_avail);
  $avail = $lc_avail;
  return $lc_avail;
}

$ENV{"LANGDRILL_X_OURDIR"} = $ourdir;
$ENV{"LANGDRILL_X_LCDIR"} = ($ourdir . '/lcn');
$ENV{"LANGDRILL_X_SCRAT"} = $ourscrat;

while ( &check_avail() < ( $minim - 0.5 ) )
{
  system("mkdir","-p",$ourscrat);
  system("sh",($ourdir . '/comres/sh/lcn-' . $ourlcn . '.sh'));
  system("rm","-rf",$ourscrat);
  system("echo","Loading: " . $avail);
  sleep(1);
}

$memry->{'last'} = &check_avail();
&saveo($memfile,$memry);

exec("perl",($ourdir . "/com/resume"));






